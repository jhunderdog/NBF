{"ast":null,"code":"import { all, fork, put, delay, call, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(retweetAPI, action.data); // const id = shortId.generate();\n\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(`/post/images`, data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addPostAPI, action.data); // const id = shortId.generate();\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(likePostAPI, action.data); // const id = shortId.generate();\n\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(unlikePostAPI, action.data); // const id = shortId.generate();\n\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data //   data: result.data,\n\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/jhunderdog/NBF/sagas/post.js"],"names":["all","fork","put","delay","call","takeLatest","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","error","response","uploadImagesAPI","uploadImages","loadPostsAPI","lastId","get","loadPosts","addPostAPI","addPost","id","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","removePostAPI","removePost","console","log","addCommentAPI","postId","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPost","LOAD_POST_REQUEST","loadPost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {\n  all,\n  fork,\n  put,\n  delay,\n  call,\n  takeLatest,\n  throttle,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  RETWEET_REQUEST,\n  RETWEET_SUCCESS,\n  RETWEET_FAILURE,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(retweetAPI, action.data);\n    // const id = shortId.generate();\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(`/post/images`, data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n  \n    });\n\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    \n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addPostAPI, action.data);\n    // const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(likePostAPI, action.data);\n    // const id = shortId.generate();\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(unlikePostAPI, action.data);\n    // const id = shortId.generate();\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n\n\n\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data,\n      //   data: result.data,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\nfunction* addComment(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([\n    fork(watchRetweet),\n    fork(watchUploadImages),\n    fork(watchLikePost),  \n    fork(watchUnlikePost),\n\n    fork(watchAddPost),\n    fork(watchLoadPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}
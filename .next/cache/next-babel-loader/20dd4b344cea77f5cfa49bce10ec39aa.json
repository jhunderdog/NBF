{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { END } from 'redux-saga';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport PostCard from '../../components/PostCard';\nimport wrapper from '../../store/configureStore';\nimport AppLayout from '../../components/AppLayout';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst User = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  const {\n    userInfo\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    const onScroll = () => {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n            data: id\n          });\n        }\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, id, loadPostsLoading]);\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [userInfo && /*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsxs(\"title\", {\n        children: [userInfo.nickname, \"\\uB2D8\\uC758 \\uAE00\"]\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: `${userInfo.nickname}님의 게시글`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:title\",\n        content: `${userInfo.nickname}님의 게시글`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"og:description\",\n        content: `${userInfo.nickname}님의 게시글`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"og:image\",\n        content: \"http://localhost:3060/favicon.ico\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"og:url\",\n        content: `https://nodebird.com/post/${id}`\n      })]\n    }), userInfo ? /*#__PURE__*/_jsx(Card, {\n      actions: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [\"\\uC9F9\\uC9F9\", /*#__PURE__*/_jsx(\"br\", {}), userInfo.Posts]\n      }, \"twit\"), /*#__PURE__*/_jsxs(\"div\", {\n        children: [\"\\uD314\\uB85C\\uC789\", /*#__PURE__*/_jsx(\"br\", {}), userInfo.Followings]\n      }, \"followings\"), /*#__PURE__*/_jsxs(\"div\", {\n        children: [\"\\uD314\\uB85C\\uC6CC\", /*#__PURE__*/_jsx(\"br\", {}), userInfo.Follwers]\n      }, \"followers\")],\n      children: /*#__PURE__*/_jsx(Card.Meta, {\n        avatar: /*#__PURE__*/_jsx(Avatar, {\n          children: userInfo.nickname[0]\n        }),\n        title: userInfo.nickname\n      })\n    }) : null, mainPosts.map(c => /*#__PURE__*/_jsx(PostCard, {\n      post: c\n    }, c.id))]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default User;","map":{"version":3,"sources":["/Users/jhunderdog/NBF/pages/user/[id].js"],"names":["React","useEffect","useDispatch","useSelector","Avatar","Card","END","Head","useRouter","axios","LOAD_USER_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","LOAD_USER_REQUEST","PostCard","wrapper","AppLayout","User","dispatch","router","id","query","mainPosts","hasMorePosts","loadPostsLoading","state","post","userInfo","user","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","lastId","length","data","addEventListener","removeEventListener","nickname","Posts","Followings","Follwers","map","c","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","params","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { END } from 'redux-saga';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\n\nimport axios from 'axios';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\n\nimport PostCard from '../../components/PostCard';\nimport wrapper from '../../store/configureStore';\nimport AppLayout from '../../components/AppLayout';\n\nconst User = () => {\n    const dispatch = useDispatch();\n    const router = useRouter();\n    const { id } = router.query;\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\n    const { userInfo } = useSelector((state) => state.user);\n\n    useEffect(() => {\n        const onScroll = () => {\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n                if (hasMorePosts && !loadPostsLoading) {\n                    dispatch({\n                        type: LOAD_USER_POSTS_REQUEST,\n                        lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length -1].id,\n                        data: id,\n                    })\n                }\n            }\n        };\n        window.addEventListener('scroll', onScroll);\n        return () => {\n            window.removeEventListener('scroll', onScroll);\n        };\n    }, [mainPosts.length, hasMorePosts, id, loadPostsLoading]);\n\n    return (\n        <AppLayout>\n            {userInfo && (<Head>\n                <title>\n                    {userInfo.nickname}\n                    님의 글\n                </title>\n                <meta name=\"description\" content={`${userInfo.nickname}님의 게시글`}/>\n                <meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`}/>\n                <meta name=\"og:description\" content={`${userInfo.nickname}님의 게시글`}/>\n                <meta name=\"og:image\" content='http://localhost:3060/favicon.ico'/>\n                <meta name=\"og:url\" content={`https://nodebird.com/post/${id}`}/>\n            </Head>)}\n            {userInfo\n            ? ( <Card\n                actions={[\n                  <div key=\"twit\">\n                    짹짹\n                    <br />\n                    {userInfo.Posts}\n                  </div>,\n                  <div key=\"followings\">\n                    팔로잉\n                    <br />\n                    {userInfo.Followings}\n                  </div>,\n                  <div key=\"followers\">\n                    팔로워\n                    <br />\n                    {userInfo.Follwers}\n                  </div>,\n                ]}\n              >\n                <Card.Meta\n                  avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\n                  title={userInfo.nickname}\n                />\n                \n              </Card>) \n              : null}\n              {mainPosts.map((c) => (\n                  <PostCard key={c.id} post={c}/>\n              ))}\n            \n        </AppLayout>\n    );\n\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n    const cookie = context.req ? context.req.headers.cookie : '';\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) {\n        axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({\n        type: LOAD_USER_POSTS_REQUEST,\n        data: context.params.id,\n    });\n    context.store.dispatch({\n        type: LOAD_MY_INFO_REQUEST,\n    });\n    context.store.dispatch({\n        type: LOAD_USER_REQUEST,\n        data: context.params.id,\n    });\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n    \n})\n\nexport default User;"]},"metadata":{},"sourceType":"module"}
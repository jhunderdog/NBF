{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      } //   data: result.data,\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data //   data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data //   data: result.data,\n\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/${data.postId}/comment\", data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/vegabond/gc/NBF/sagas/post.js"],"names":["all","fork","put","delay","takeLatest","axios","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","delete","removePost","console","log","addCommentAPI","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n      //   data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n      //   data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n      //   data: result.data,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/${data.postId}/comment\", data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST)\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}
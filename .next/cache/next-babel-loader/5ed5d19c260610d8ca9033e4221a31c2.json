{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map((v, i) => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})); // initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LOAD_POSTS_REQUEST = \"ADD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"ADD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"ADD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex(\n          //   (y) => y.id === action.data.postId\n          // );\n          // const post = state.mainPosts[postIndex];\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/vegabond/gc/NBF/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","v","i","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","concat","length","error","unshift","filter","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map((v, i) => ({\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{ src: faker.image.image() }],\n      Comments: [\n        {\n          User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LOAD_POSTS_REQUEST = \"ADD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"ADD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"ADD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex(\n        //   (y) => y.id === action.data.postId\n        // );\n        // const post = state.mainPosts[postIndex];\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}
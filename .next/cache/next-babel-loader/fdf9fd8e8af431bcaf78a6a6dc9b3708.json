{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport wrapper from \"../store/configureStore\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    console.log('rerender');\n\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [me && /*#__PURE__*/_jsx(PostForm, {}), mainPosts.map((post, index) => /*#__PURE__*/_jsx(PostCard, {\n      post: post\n    }, post.id))]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Home; //코드스플리팅\n// export const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n//   console.log('getServerSideProps start');\n//   console.log(context.req.headers);\n//   const cookie = context.req ? context.req.headers.cookie : '';\n//   axios.defaults.headers.Cookie = '';\n//   if (context.req && cookie) {\n//     axios.defaults.headers.Cookie = cookie;\n//   }\n//   context.store.dispatch({\n//     type: LOAD_MY_INFO_REQUEST,\n//   });\n//   context.store.dispatch({\n//     type: LOAD_POSTS_REQUEST,\n//   });\n//   context.store.dispatch(END);\n//   console.log('getServerSideProps end');\n//   await context.store.sagaTask.toPromise();\n// });","map":null,"metadata":{},"sourceType":"module"}
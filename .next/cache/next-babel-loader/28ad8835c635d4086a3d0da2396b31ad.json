{"ast":null,"code":"import { all, fork, put, delay, call, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction uploadImagesAPI(data) {\n  return axios.post(`/post/images`, data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(uploadImagesAPI, action.data); // const id = shortId.generate();\n\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addPostAPI, action.data); // const id = shortId.generate();\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(likePostAPI, action.data); // const id = shortId.generate();\n\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(unlikePostAPI, action.data); // const id = shortId.generate();\n\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data //   data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data //   data: result.data,\n\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/jhunderdog/NBF/sagas/post.js"],"names":["all","fork","put","delay","call","takeLatest","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","uploadImagesAPI","data","post","uploadImages","action","result","type","err","response","loadPostsAPI","get","loadPosts","addPostAPI","addPost","id","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","removePostAPI","removePost","console","log","addCommentAPI","postId","addComment","error","watchRetweet","retweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {\n  all,\n  fork,\n  put,\n  delay,\n  call,\n  takeLatest,\n  throttle,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  RETWEET_REQUEST,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n\nfunction uploadImagesAPI(data) {\n  return axios.post(`/post/images`, data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(uploadImagesAPI, action.data);\n    // const id = shortId.generate();\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addPostAPI, action.data);\n    // const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(likePostAPI, action.data);\n    // const id = shortId.generate();\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(unlikePostAPI, action.data);\n    // const id = shortId.generate();\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n\n\n\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data,\n      //   data: result.data,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\nfunction* addComment(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([\n    fork(watchRetweet),\n    fork(watchUploadImages),\n    fork(watchLikePost),  \n    fork(watchUnlikePost),\n\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}
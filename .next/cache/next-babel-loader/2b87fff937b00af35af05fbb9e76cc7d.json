{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, delay, call, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadPostsAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data //   data: result.data,\n\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction addPost(action) {\n  var result, id;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          id = shortId.generate();\n          _context2.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data //   data: result.data,\n\n          });\n\n        case 7:\n          _context2.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id //   data: result.data,\n\n          });\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 11]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data //   data: result.data,\n\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LIKE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/api/post\", data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data //   data: result.data,\n\n          });\n\n        case 5:\n          _context4.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data //   data: result.data,\n\n          });\n\n        case 7:\n          _context4.next = 14;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n          _context4.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 9]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); // POST /post/1/comment\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}","map":{"version":3,"sources":["/Users/jhunderdog/NBF/sagas/post.js"],"names":["loadPosts","addPost","likePost","removePost","addComment","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","fork","put","delay","call","takeLatest","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","action","result","type","response","addPostAPI","post","content","id","shortId","generate","likePostAPI","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","removePostAPI","console","log","addCommentAPI","postId","error","unlikePost"],"mappings":"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","sourcesContent":["import {\n  all,\n  fork,\n  put,\n  delay,\n  call,\n  takeLatest,\n  throttle,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LIKE_POST_REQUEST,\n  UNLIKE_POST_REQUEST,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", { content: data });\n}\n\nfunction* addPost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n\nfunction likePostAPI(data) {\n  return axios.post(\"/post\", { content: data });\n}\n\nfunction* likePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(likePostAPI, action.data);\n    // const id = shortId.generate();\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n      //   data: result.data,\n    });\n\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n\n\n\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n      //   data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n      //   data: result.data,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\nfunction* addComment(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([\n    fork(watchLikePost),  \n    fork(watchUnlikePost),\n\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}
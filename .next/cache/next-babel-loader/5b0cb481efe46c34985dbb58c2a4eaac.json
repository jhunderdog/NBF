{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from \"../reducers/post\";\nimport useInput from \"../hooks/useInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar PostForm = function PostForm() {\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(\"\"),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var imageInput = useRef();\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    console.log('images', e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    console.log(imageFormData.image);\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  });\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  });\n  return /*#__PURE__*/_jsxs(Form, {\n    style: {\n      margin: \"10px 0 20px\"\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    children: [/*#__PURE__*/_jsx(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImages\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: onClickImageUpload,\n        children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"primary\",\n        style: {\n          \"float\": \"right\"\n        },\n        htmlType: \"submit\",\n        children: \"\\uC9F9\\uC9F9\"\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: imagePaths.map(function (v, i) {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          style: {\n            display: \"inline-block\"\n          },\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            src: \"http://localhost:3065/\".concat(v),\n            style: {\n              width: \"200px\"\n            },\n            alt: v\n          }), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(Button, {\n              onClick: onRemoveImage(i),\n              children: \"\\uC81C\\uAC70\"\n            })\n          })]\n        }, v);\n      })\n    })]\n  });\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/jhunderdog/NBF/components/PostForm.js"],"names":["React","useState","useCallback","useRef","useEffect","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","useInput","PostForm","state","post","imagePaths","addPostDone","dispatch","text","onChangeText","setText","onSubmit","trim","alert","formData","FormData","forEach","p","append","type","data","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","image","onRemoveImage","index","margin","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from \"../reducers/post\";\nimport useInput from \"../hooks/useInput\";\nconst PostForm = () => {\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\n\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput(\"\");\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n    const formData = new FormData();\n    imagePaths.forEach((p) => {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData,\n    });\n  }, [text, imagePaths]);\n\n  const imageInput = useRef();\n\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n\n  const onChangeImages = useCallback((e)=> {\n    console.log('images', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, (f) => {\n      imageFormData.append('image', f);\n    });\n    console.log(imageFormData.image);\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData,\n    })\n  });\n\n  const onRemoveImage = useCallback((index) => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index,\n    })\n  })\n  return (\n    <Form\n      style={{ margin: \"10px 0 20px\" }}\n      encType=\"multipart/form-data\"\n      onFinish={onSubmit}\n    >\n      <Input.TextArea\n        value={text}\n        onChange={onChangeText}\n        maxLength={140}\n        placeholder=\"어떤 신기한 일이 있었나요?\"\n      />\n      <div>\n        <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages}/>\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n        <Button type=\"primary\" style={{ float: \"right\" }} htmlType=\"submit\">\n          짹짹\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map((v, i) => (\n          <div key={v} style={{ display: \"inline-block\" }}>\n            <img src={`http://localhost:3065/${v}`} style={{ width: \"200px\" }} alt={v} />\n            <div>\n              <Button onClick={onRemoveImage(i)}>제거</Button>\n            </div>\n          </div>\n  ))}\n      </div>\n    </Form>\n  );\n};\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}
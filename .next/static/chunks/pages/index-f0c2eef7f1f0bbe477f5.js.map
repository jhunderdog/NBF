{"version":3,"sources":["webpack://_N_E/./components/PostForm.js","webpack://_N_E/./pages/index.js","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js"],"names":["PostForm","useSelector","state","post","imagePaths","addPostDone","dispatch","useDispatch","useInput","text","onChangeText","setText","useEffect","onSubmit","useCallback","trim","alert","formData","FormData","forEach","p","append","type","ADD_POST_REQUEST","data","imageInput","useRef","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","image","UPLOAD_IMAGES_REQUEST","onRemoveImage","index","REMOVE_IMAGE","style","margin","encType","onFinish","TextArea","value","onChange","maxLength","placeholder","name","multiple","hidden","ref","onClick","float","htmlType","map","v","i","display","src","width","alt","Home","me","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","LOAD_POSTS_REQUEST","addEventListener","removeEventListener","AppLayout","PostCard","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/index-f0c2eef7f1f0bbe477f5.js","sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from \"../reducers/post\";\nimport useInput from \"../hooks/useInput\";\nconst PostForm = () => {\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\n\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput(\"\");\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n    const formData = new FormData();\n    imagePaths.forEach((p) => {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData,\n    });\n  }, [text, imagePaths]);\n\n  const imageInput = useRef();\n\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n\n  const onChangeImages = useCallback((e)=> {\n    console.log('images', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, (f) => {\n      imageFormData.append('image', f);\n    });\n    console.log(imageFormData.image);\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData,\n    })\n  });\n\n  const onRemoveImage = useCallback((index) => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index,\n    })\n  })\n  return (\n    <Form\n      style={{ margin: \"10px 0 20px\" }}\n      encType=\"multipart/form-data\"\n      onFinish={onSubmit}\n    >\n      <Input.TextArea\n        value={text}\n        onChange={onChangeText}\n        maxLength={140}\n        placeholder=\"어떤 신기한 일이 있었나요?\"\n      />\n      <div>\n        <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages}/>\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n        <Button type=\"primary\" style={{ float: \"right\" }} htmlType=\"submit\">\n          짹짹\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map((v, i) => (\n          <div key={v} style={{ display: \"inline-block\" }}>\n            <img src={`http://localhost:3065/${v}`} style={{ width: \"200px\" }} alt={v} />\n            <div>\n              <Button onClick={onRemoveImage(i)}>제거</Button>\n            </div>\n          </div>\n  ))}\n      </div>\n    </Form>\n  );\n};\n\nexport default PostForm;\n","import React, { useEffect } from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport wrapper from \"../store/configureStore\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state) => state.user);\n  const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector(\n    (state) => state.post\n  );\n\n  useEffect(() => {\n    console.log('rerender');\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n\n\n  useEffect(() => {\n    function onScroll() {\n      if (\n        window.scrollY + document.documentElement.clientHeight >\n        document.documentElement.scrollHeight - 300\n      ) {\n        if (hasMorePosts && !loadPostsLoading) {\n          const lastId = mainPosts[mainPosts.length - 1]?.id\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId,\n          });\n        }\n      }\n    }\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n\n  return (\n    <AppLayout>\n      {me && <PostForm />}\n      {mainPosts.map((post, index) => (\n        <PostCard key={post.id} post={post} />\n      ))}\n    </AppLayout>\n  );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST,\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST,\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Home;\n\n//코드스플리팅\n\n// export const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n//   console.log('getServerSideProps start');\n//   console.log(context.req.headers);\n//   const cookie = context.req ? context.req.headers.cookie : '';\n//   axios.defaults.headers.Cookie = '';\n//   if (context.req && cookie) {\n//     axios.defaults.headers.Cookie = cookie;\n//   }\n//   context.store.dispatch({\n//     type: LOAD_MY_INFO_REQUEST,\n//   });\n//   context.store.dispatch({\n//     type: LOAD_POSTS_REQUEST,\n//   });\n//   context.store.dispatch(END);\n//   console.log('getServerSideProps end');\n//   await context.store.sagaTask.toPromise();\n// });","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.js\");\n      }\n    ]);\n  "],"sourceRoot":""}